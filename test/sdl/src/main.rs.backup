use std::cmp::Ordering;
use priority_queue::PriorityQueue;

type Point = (usize, usize);

#[derive(Hash, Copy, Clone, PartialEq, Eq, Debug)]
struct Node {
    pos: Point,
    g: usize,
    h: usize,
}

impl Ord for Node {
    fn cmp(&self, other: &Self) -> Ordering {
        (self.g + self.h).cmp(&(other.g + other.h)).reverse()
    }
}

impl PartialOrd for Node {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

fn a_star(map: &Vec<Vec<bool>>, start: Point, end: Point) -> Option<Vec<Point>> {
    let mut open_set = PriorityQueue::new();
    let mut came_from = vec![vec![None; map[0].len()]; map.len()];

    open_set.push(Node { pos: start, g: 0, h: manhattan_distance(start, end) }, 0);

    while let Some((current, _)) = open_set.pop() {
        if current.pos == end {
            let mut path = Vec::new();
            let mut current_pos = end;
            while current_pos != start {
                path.push(current_pos);
                current_pos = came_from[current_pos.0][current_pos.1].unwrap();
            }
            path.push(start);
            path.reverse();
            return Some(path);
        }

        for (dx, dy) in &[(-1i32, 0), (1, 0), (0, -1), (0, 1)] {
            let neighbor_pos = (
                (current.pos.0 as i32 + dx) as usize,
                (current.pos.1 as i32 + dy) as usize,
            );

            if !is_valid(neighbor_pos, &map) {
                continue;
            }

            let tentative_g = current.g + 1;

            if came_from[neighbor_pos.0][neighbor_pos.1].is_none() {
                let neighbor_node = Node {
                    pos: neighbor_pos,
                    g: tentative_g,
                    h: manhattan_distance(neighbor_pos, end),
                };
                came_from[neighbor_pos.0][neighbor_pos.1] = Some(current.pos);
                open_set.push(neighbor_node, tentative_g);
            } else {
                let neighbor_node = Node {
                    pos: neighbor_pos,
                    g: tentative_g,
                    h: manhattan_distance(neighbor_pos, end),
                };
                if tentative_g < *open_set.get_priority(&neighbor_node).unwrap_or(&usize::MAX) {
                    came_from[neighbor_pos.0][neighbor_pos.1] = Some(current.pos);
                    open_set.push(neighbor_node, tentative_g);
                }
            }


            /*if came_from[neighbor_pos.0][neighbor_pos.1].is_none()
                || tentative_g < came_from[neighbor_pos.0][neighbor_pos.1].map(|pos| pos.g).unwrap_or(usize::MAX)
            {
                came_from[neighbor_pos.0][neighbor_pos.1] = Some(Node { pos: current.pos, g: tentative_g, h: manhattan_distance(neighbor_pos, end) });
                open_set.push(
                    Node {
                        pos: neighbor_pos,
                        g: tentative_g,
                        h: manhattan_distance(neighbor_pos, end),
                    },
                    tentative_g,
                );
            }*/

            /*if came_from[neighbor_pos.0][neighbor_pos.1].is_none()
                || tentative_g < came_from[neighbor_pos.0][neighbor_pos.1].unwrap().g
            {
                came_from[neighbor_pos.0][neighbor_pos.1] = Some(current.pos);
                open_set.push(
                    Node {
                        pos: neighbor_pos,
                        g: tentative_g,
                        h: manhattan_distance(neighbor_pos, end),
                    },
                    tentative_g,
                );
            }*/
        }
    }

    None
}

fn manhattan_distance(a: Point, b: Point) -> usize {
    ((a.0 as isize - b.0 as isize).abs() + (a.1 as isize - b.1 as isize).abs()) as usize
}

fn is_valid(pos: Point, map: &Vec<Vec<bool>>) -> bool {
    pos.0 < map.len() && pos.1 < map[0].len() && map[pos.0][pos.1]
}

// ... (previous code) ...

fn main() {
    let map = vec![
        vec![true, true, true, false, true, true, true, true],
        vec![true, true, true, false, true, false, true, true],
        vec![true, true, true, false, true, false, true, true],
        vec![true, true, true, false, true, false, true, true],
        vec![true, true, true, false, true, false, true, true],
        vec![true, true, true, true, true, false, true, true],
        vec![true, true, true, true, true, false, true, true],
        vec![true, true, true, true, true, true, true, true],
    ];

    let start = (0, 0);
    let end = (7, 7);

    match a_star(&map, start, end) {
        Some(path) => {
            println!("Path found:");
            for (i, pos) in path.iter().enumerate() {
                if i != 0 {
                    print!(" -> ");
                }
                print!("({},{})", pos.0, pos.1);
            }
            println!();
        }
        None => {
            println!("No path found.");
        }
    }
}

